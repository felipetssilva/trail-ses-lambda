[0m[1mmodule.lambda.data.archive_file.lambda_zip: Reading...[0m[0m
[0m[1mmodule.lambda.data.archive_file.lambda_zip: Read complete after 0s [id=0774c4c0e5516117085a05f16adbe464ace75b65][0m
[0m[1mmodule.cloudwatch.aws_cloudwatch_event_rule.ec2_state_change: Refreshing state... [id=capture-ec2-state-changes][0m
[0m[1mmodule.cloudtrail-ses.aws_ses_email_identity.email: Refreshing state... [id=felipetssilva@gmail.com][0m
[0m[1mmodule.ec2-related-resources.aws_vpc.main: Refreshing state... [id=vpc-001f9b5803b0199af][0m
[0m[1mmodule.ec2-related-resources.aws_internet_gateway.main: Refreshing state... [id=igw-0cc7f7fd238c92ffd][0m
[0m[1mmodule.ec2-related-resources.aws_subnet.public: Refreshing state... [id=subnet-079a804ad1b654b25][0m
[0m[1mmodule.ec2-related-resources.aws_security_group.ec2_sg: Refreshing state... [id=sg-009f6df8a427d0b15][0m
[0m[1mmodule.ec2-related-resources.aws_route_table.public: Refreshing state... [id=rtb-0126e033cbcf339e0][0m
[0m[1mmodule.ec2-related-resources.aws_instance.trail-followed-ec2: Refreshing state... [id=i-00c6395be016be2bf][0m
[0m[1mmodule.ec2-related-resources.aws_route_table_association.public: Refreshing state... [id=rtbassoc-0db0a9e411efa3700][0m

Terraform used the selected providers to generate the following execution
plan. Resource actions are indicated with the following symbols:
  [32m+[0m create[0m

Terraform will perform the following actions:

[1m  # aws_s3_bucket.trail_s3[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket" "trail_s3" {
      [32m+[0m[0m acceleration_status         = (known after apply)
      [32m+[0m[0m acl                         = (known after apply)
      [32m+[0m[0m arn                         = (known after apply)
      [32m+[0m[0m bucket                      = "trail-bucket"
      [32m+[0m[0m bucket_domain_name          = (known after apply)
      [32m+[0m[0m bucket_prefix               = (known after apply)
      [32m+[0m[0m bucket_regional_domain_name = (known after apply)
      [32m+[0m[0m force_destroy               = false
      [32m+[0m[0m hosted_zone_id              = (known after apply)
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m object_lock_enabled         = (known after apply)
      [32m+[0m[0m policy                      = (known after apply)
      [32m+[0m[0m region                      = (known after apply)
      [32m+[0m[0m request_payer               = (known after apply)
      [32m+[0m[0m tags                        = {
          [32m+[0m[0m "Environment" = "Test"
          [32m+[0m[0m "Name"        = "trail-bucket"
        }
      [32m+[0m[0m tags_all                    = {
          [32m+[0m[0m "Environment" = "Test"
          [32m+[0m[0m "Name"        = "trail-bucket"
        }
      [32m+[0m[0m website_domain              = (known after apply)
      [32m+[0m[0m website_endpoint            = (known after apply)

      [32m+[0m[0m cors_rule (known after apply)

      [32m+[0m[0m grant (known after apply)

      [32m+[0m[0m lifecycle_rule (known after apply)

      [32m+[0m[0m logging (known after apply)

      [32m+[0m[0m object_lock_configuration (known after apply)

      [32m+[0m[0m replication_configuration (known after apply)

      [32m+[0m[0m server_side_encryption_configuration (known after apply)

      [32m+[0m[0m versioning (known after apply)

      [32m+[0m[0m website (known after apply)
    }

[1m  # aws_s3_bucket_policy.cloudtrail_policy[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket_policy" "cloudtrail_policy" {
      [32m+[0m[0m bucket = (known after apply)
      [32m+[0m[0m id     = (known after apply)
      [32m+[0m[0m policy = (known after apply)
    }

[1m  # module.cloudtrail-ses.aws_cloudtrail.main[0m will be created
[0m  [32m+[0m[0m resource "aws_cloudtrail" "main" {
      [32m+[0m[0m arn                           = (known after apply)
      [32m+[0m[0m enable_log_file_validation    = false
      [32m+[0m[0m enable_logging                = true
      [32m+[0m[0m home_region                   = (known after apply)
      [32m+[0m[0m id                            = (known after apply)
      [32m+[0m[0m include_global_service_events = true
      [32m+[0m[0m is_multi_region_trail         = true
      [32m+[0m[0m is_organization_trail         = false
      [32m+[0m[0m name                          = "management-events-trail"
      [32m+[0m[0m s3_bucket_name                = (known after apply)
      [32m+[0m[0m sns_topic_arn                 = (known after apply)
      [32m+[0m[0m tags_all                      = (known after apply)

      [32m+[0m[0m event_selector {
          [32m+[0m[0m include_management_events = true
          [32m+[0m[0m read_write_type           = "All"
        }
    }

[1m  # module.cloudwatch.aws_cloudwatch_event_target.lambda[0m will be created
[0m  [32m+[0m[0m resource "aws_cloudwatch_event_target" "lambda" {
      [32m+[0m[0m arn            = (known after apply)
      [32m+[0m[0m event_bus_name = "default"
      [32m+[0m[0m force_destroy  = false
      [32m+[0m[0m id             = (known after apply)
      [32m+[0m[0m rule           = "capture-ec2-state-changes"
      [32m+[0m[0m target_id      = "SendToLambda"
    }

[1m  # module.cloudwatch.aws_lambda_permission.allow_cloudwatch[0m will be created
[0m  [32m+[0m[0m resource "aws_lambda_permission" "allow_cloudwatch" {
      [32m+[0m[0m action              = "lambda:InvokeFunction"
      [32m+[0m[0m function_name       = "lambda_events_sns_s3"
      [32m+[0m[0m id                  = (known after apply)
      [32m+[0m[0m principal           = "events.amazonaws.com"
      [32m+[0m[0m source_arn          = "arn:aws:events:us-east-1:767397833358:rule/capture-ec2-state-changes"
      [32m+[0m[0m statement_id        = "AllowCloudWatchEventsInvoke"
      [32m+[0m[0m statement_id_prefix = (known after apply)
    }

[1m  # module.lambda.aws_iam_policy.lambda_policy[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_policy" "lambda_policy" {
      [32m+[0m[0m arn              = (known after apply)
      [32m+[0m[0m attachment_count = (known after apply)
      [32m+[0m[0m description      = "Policy for Lambda to access S3, CloudTrail, and SES"
      [32m+[0m[0m id               = (known after apply)
      [32m+[0m[0m name             = "lambda_s3_cloudtrail_ses_policy"
      [32m+[0m[0m name_prefix      = (known after apply)
      [32m+[0m[0m path             = "/"
      [32m+[0m[0m policy           = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "s3:PutObject",
                          [32m+[0m[0m "s3:GetObject",
                          [32m+[0m[0m "s3:ListBucket",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = [
                          [32m+[0m[0m "arn:aws:s3:::trail-bucket",
                          [32m+[0m[0m "arn:aws:s3:::trail-bucket/*",
                        ]
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "cloudtrail:LookupEvents",
                          [32m+[0m[0m "cloudtrail:GetTrailStatus",
                          [32m+[0m[0m "cloudtrail:DescribeTrails",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "ses:SendEmail",
                          [32m+[0m[0m "ses:SendRawEmail",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "*"
                    },
                  [32m+[0m[0m {
                      [32m+[0m[0m Action   = [
                          [32m+[0m[0m "logs:CreateLogGroup",
                          [32m+[0m[0m "logs:CreateLogStream",
                          [32m+[0m[0m "logs:PutLogEvents",
                        ]
                      [32m+[0m[0m Effect   = "Allow"
                      [32m+[0m[0m Resource = "arn:aws:logs:*:*:*"
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m policy_id        = (known after apply)
      [32m+[0m[0m tags_all         = (known after apply)
    }

[1m  # module.lambda.aws_iam_role.lambda_role[0m will be created
[0m  [32m+[0m[0m resource "aws_iam_role" "lambda_role" {
      [32m+[0m[0m arn                   = (known after apply)
      [32m+[0m[0m assume_role_policy    = jsonencode(
            {
              [32m+[0m[0m Statement = [
                  [32m+[0m[0m {
                      [32m+[0m[0m Action    = "sts:AssumeRole"
                      [32m+[0m[0m Effect    = "Allow"
                      [32m+[0m[0m Principal = {
                          [32m+[0m[0m Service = "lambda.amazonaws.com"
                        }
                    },
                ]
              [32m+[0m[0m Version   = "2012-10-17"
            }
        )
      [32m+[0m[0m create_date           = (known after apply)
      [32m+[0m[0m force_detach_policies = false
      [32m+[0m[0m id                    = (known after apply)
      [32m+[0m[0m managed_policy_arns   = (known after apply)
      [32m+[0m[0m max_session_duration  = 3600
      [32m+[0m[0m name                  = "lambda_ses_role"
      [32m+[0m[0m name_prefix           = (known after apply)
      [32m+[0m[0m path                  = "/"
      [32m+[0m[0m tags_all              = (known after apply)
      [32m+[0m[0m unique_id             = (known after apply)

      [32m+[0m[0m inline_policy (known after apply)
    }

[1m  # module.lambda.aws_lambda_function.notification_lambda[0m will be created
[0m  [32m+[0m[0m resource "aws_lambda_function" "notification_lambda" {
      [32m+[0m[0m architectures                  = (known after apply)
      [32m+[0m[0m arn                            = (known after apply)
      [32m+[0m[0m code_sha256                    = (known after apply)
      [32m+[0m[0m filename                       = "lambda_function.zip"
      [32m+[0m[0m function_name                  = "lambda_events_sns_s3"
      [32m+[0m[0m handler                        = "lambda_function.lambda_handler"
      [32m+[0m[0m id                             = (known after apply)
      [32m+[0m[0m invoke_arn                     = (known after apply)
      [32m+[0m[0m last_modified                  = (known after apply)
      [32m+[0m[0m memory_size                    = 128
      [32m+[0m[0m package_type                   = "Zip"
      [32m+[0m[0m publish                        = false
      [32m+[0m[0m qualified_arn                  = (known after apply)
      [32m+[0m[0m qualified_invoke_arn           = (known after apply)
      [32m+[0m[0m reserved_concurrent_executions = -1
      [32m+[0m[0m role                           = (known after apply)
      [32m+[0m[0m runtime                        = "python3.9"
      [32m+[0m[0m s3_bucket                      = (known after apply)
      [32m+[0m[0m s3_key                         = "lambda_function.zip"
      [32m+[0m[0m signing_job_arn                = (known after apply)
      [32m+[0m[0m signing_profile_version_arn    = (known after apply)
      [32m+[0m[0m skip_destroy                   = false
      [32m+[0m[0m source_code_hash               = (known after apply)
      [32m+[0m[0m source_code_size               = (known after apply)
      [32m+[0m[0m tags_all                       = (known after apply)
      [32m+[0m[0m timeout                        = 3
      [32m+[0m[0m version                        = (known after apply)

      [32m+[0m[0m environment {
          [32m+[0m[0m variables = {
              [32m+[0m[0m "AWS_REGION"   = "us-east-1"
              [32m+[0m[0m "SOURCE_EMAIL" = "felipetssilva@gmail.com"
            }
        }

      [32m+[0m[0m ephemeral_storage (known after apply)

      [32m+[0m[0m logging_config (known after apply)

      [32m+[0m[0m tracing_config (known after apply)
    }

[1m  # module.lambda.aws_s3_bucket.lambda_s3[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_bucket" "lambda_s3" {
      [32m+[0m[0m acceleration_status         = (known after apply)
      [32m+[0m[0m acl                         = (known after apply)
      [32m+[0m[0m arn                         = (known after apply)
      [32m+[0m[0m bucket                      = "lambda-bucket"
      [32m+[0m[0m bucket_domain_name          = (known after apply)
      [32m+[0m[0m bucket_prefix               = (known after apply)
      [32m+[0m[0m bucket_regional_domain_name = (known after apply)
      [32m+[0m[0m force_destroy               = false
      [32m+[0m[0m hosted_zone_id              = (known after apply)
      [32m+[0m[0m id                          = (known after apply)
      [32m+[0m[0m object_lock_enabled         = (known after apply)
      [32m+[0m[0m policy                      = (known after apply)
      [32m+[0m[0m region                      = (known after apply)
      [32m+[0m[0m request_payer               = (known after apply)
      [32m+[0m[0m tags_all                    = (known after apply)
      [32m+[0m[0m website_domain              = (known after apply)
      [32m+[0m[0m website_endpoint            = (known after apply)

      [32m+[0m[0m cors_rule (known after apply)

      [32m+[0m[0m grant (known after apply)

      [32m+[0m[0m lifecycle_rule (known after apply)

      [32m+[0m[0m logging (known after apply)

      [32m+[0m[0m object_lock_configuration (known after apply)

      [32m+[0m[0m replication_configuration (known after apply)

      [32m+[0m[0m server_side_encryption_configuration (known after apply)

      [32m+[0m[0m versioning (known after apply)

      [32m+[0m[0m website (known after apply)
    }

[1m  # module.lambda.aws_s3_object.lambda_code[0m will be created
[0m  [32m+[0m[0m resource "aws_s3_object" "lambda_code" {
      [32m+[0m[0m acl                    = (known after apply)
      [32m+[0m[0m arn                    = (known after apply)
      [32m+[0m[0m bucket                 = (known after apply)
      [32m+[0m[0m bucket_key_enabled     = (known after apply)
      [32m+[0m[0m checksum_crc32         = (known after apply)
      [32m+[0m[0m checksum_crc32c        = (known after apply)
      [32m+[0m[0m checksum_sha1          = (known after apply)
      [32m+[0m[0m checksum_sha256        = (known after apply)
      [32m+[0m[0m content_type           = (known after apply)
      [32m+[0m[0m etag                   = "d16022d4ba17526c0a1203cef06f8156"
      [32m+[0m[0m force_destroy          = false
      [32m+[0m[0m id                     = (known after apply)
      [32m+[0m[0m key                    = "lambda_function.zip"
      [32m+[0m[0m kms_key_id             = (known after apply)
      [32m+[0m[0m server_side_encryption = (known after apply)
      [32m+[0m[0m source                 = "modules/lambda/lambda_function.zip"
      [32m+[0m[0m storage_class          = (known after apply)
      [32m+[0m[0m tags_all               = (known after apply)
      [32m+[0m[0m version_id             = (known after apply)
    }

[1mPlan:[0m 10 to add, 0 to change, 0 to destroy.
[0m
Changes to Outputs:
  [32m+[0m[0m ses-notifications-s3 = (known after apply)
[0m[1m
Do you want to perform these actions?[0m
  Terraform will perform the actions described above.
  Only 'yes' will be accepted to approve.

  [1mEnter a value:[0m [0m
[0m[1mmodule.lambda.aws_iam_role.lambda_role: Creating...[0m[0m
[0m[1mmodule.lambda.aws_iam_policy.lambda_policy: Creating...[0m[0m
[0m[1mmodule.lambda.aws_s3_bucket.lambda_s3: Creating...[0m[0m
[0m[1maws_s3_bucket.trail_s3: Creating...[0m[0m
